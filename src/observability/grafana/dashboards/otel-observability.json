{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "graphTooltip": 0,
  "refresh": "10s",
  "panels": [
    {
      "type": "row",
      "title": "Service Health",
      "gridPos": { "h": 1, "w": 24, "x": 0, "y": 0 }
    },
    {
      "type": "stat",
      "title": "Gateway",
      "gridPos": { "h": 4, "w": 6, "x": 0, "y": 1 },
      "datasource": { "type": "prometheus", "uid": "prom" },
      "fieldConfig": {
        "defaults": {
          "mappings": [
            {
              "type": "value",
              "options": {
                "0": { "text": "DOWN", "color": "red" },
                "1": { "text": "UP", "color": "green" }
              }
            }
          ]
        }
      },
      "options": { "reduceOptions": { "calcs": ["lastNotNull"], "fields": "", "values": false } },
      "targets": [
        {
          "refId": "A",
          "expr": "max_over_time(probe_success{job=\"blackbox\",instance=\"http://yarpapigateway:8080/health\"}[1m])"
        }
      ]
    },
    {
      "type": "stat",
      "title": "Basket API",
      "gridPos": { "h": 4, "w": 6, "x": 6, "y": 1 },
      "datasource": { "type": "prometheus", "uid": "prom" },
      "fieldConfig": {
        "defaults": {
          "mappings": [
            {
              "type": "value",
              "options": {
                "0": { "text": "DOWN", "color": "red" },
                "1": { "text": "UP", "color": "green" }
              }
            }
          ]
        }
      },
      "options": { "reduceOptions": { "calcs": ["lastNotNull"], "fields": "", "values": false } },
      "targets": [
        {
          "refId": "A",
          "expr": "max_over_time(probe_success{job=\"blackbox\",instance=\"http://basket.api:8080/health\"}[1m])"
        }
      ]
    },
    {
      "type": "stat",
      "title": "Catalog API",
      "gridPos": { "h": 4, "w": 6, "x": 12, "y": 1 },
      "datasource": { "type": "prometheus", "uid": "prom" },
      "fieldConfig": {
        "defaults": {
          "mappings": [
            {
              "type": "value",
              "options": {
                "0": { "text": "DOWN", "color": "red" },
                "1": { "text": "UP", "color": "green" }
              }
            }
          ]
        }
      },
      "options": { "reduceOptions": { "calcs": ["lastNotNull"], "fields": "", "values": false } },
      "targets": [
        {
          "refId": "A",
          "expr": "max_over_time(probe_success{job=\"blackbox\",instance=\"http://catalog.api:8080/health\"}[1m])"
        }
      ]
    },
    {
      "type": "stat",
      "title": "Ordering API",
      "gridPos": { "h": 4, "w": 6, "x": 18, "y": 1 },
      "datasource": { "type": "prometheus", "uid": "prom" },
      "fieldConfig": {
        "defaults": {
          "mappings": [
            {
              "type": "value",
              "options": {
                "0": { "text": "DOWN", "color": "red" },
                "1": { "text": "UP", "color": "green" }
              }
            }
          ]
        }
      },
      "options": { "reduceOptions": { "calcs": ["lastNotNull"], "fields": "", "values": false } },
      "targets": [
        {
          "refId": "A",
          "expr": "max_over_time(probe_success{job=\"blackbox\",instance=\"http://ordering.api:8080/health\"}[1m])"
        }
      ]
    },

    {
      "type": "row",
      "title": "Metrics",
      "gridPos": { "h": 1, "w": 24, "x": 0, "y": 5 }
    },
    {
      "type": "timeseries",
      "title": "Traffic (requests per second)",
      "gridPos": { "h": 8, "w": 12, "x": 0, "y": 6 },
      "datasource": { "type": "prometheus", "uid": "prom" },
      "fieldConfig": { "defaults": { "unit": "req/s" } },
      "targets": [
        {
          "refId": "A",
          "expr": "sum by (service_name) (rate(http_server_request_duration_seconds_count{service_name=~\"$service\"}[$__rate_interval]))",
          "range": true
        }
      ],
      "options": {
        "legend": { "showLegend": true, "displayMode": "list", "placement": "bottom" },
        "tooltip": { "mode": "single", "sort": "none" }
      }
    },
    {
      "type": "timeseries",
      "title": "Latency p95 (ms) by service",
      "gridPos": { "h": 8, "w": 12, "x": 12, "y": 6 },
      "datasource": { "type": "prometheus", "uid": "prom" },
      "fieldConfig": { "defaults": { "unit": "ms" } },
      "targets": [
        {
          "refId": "A",
          "expr": "1000 * histogram_quantile(0.95, sum by (service_name, le) (rate(http_server_request_duration_seconds_bucket{service_name=~\"$service\"}[5m])))",
          "range": true
        }
      ],
      "options": {
        "legend": { "showLegend": true, "displayMode": "list", "placement": "bottom" },
        "tooltip": { "mode": "single", "sort": "none" }
      }
    },
    {
      "type": "timeseries",
      "title": "Errors (5xx %) by service",
      "gridPos": { "h": 8, "w": 12, "x": 0, "y": 14 },
      "datasource": { "type": "prometheus", "uid": "prom" },
      "fieldConfig": { "defaults": { "unit": "percent", "decimals": 2 } },
      "targets": [
        {
          "refId": "A",
          "expr": "100 * sum by (service_name) (rate(http_server_request_duration_seconds_count{service_name=~\"$service\",http_response_status_code=~\"5..\"}[$__rate_interval])) / clamp_min(sum by (service_name) (rate(http_server_request_duration_seconds_count{service_name=~\"$service\"}[$__rate_interval])), 1)",
          "range": true
        }
      ],
      "options": {
        "legend": { "showLegend": true, "displayMode": "list", "placement": "bottom" },
        "tooltip": { "mode": "single", "sort": "none" }
      }
    },
    {
      "type": "timeseries",
      "title": "Saturation (Managed heap MB) by service",
      "gridPos": { "h": 8, "w": 12, "x": 12, "y": 14 },
      "datasource": { "type": "prometheus", "uid": "prom" },
      "fieldConfig": { "defaults": { "unit": "megabytes" } },
      "targets": [
        {
          "refId": "A",
          "expr": "sum by (service_name) (process_runtime_dotnet_gc_heap_size_bytes{service_name=~\"$service\"}) / 1024 / 1024",
          "range": true
        }
      ],
      "options": {
        "legend": { "showLegend": true, "displayMode": "list", "placement": "bottom" },
        "tooltip": { "mode": "single", "sort": "none" }
      }
    },

    {
      "type": "row",
      "title": "Logs & Traces",
      "gridPos": { "h": 1, "w": 24, "x": 0, "y": 22 }
    },
    {
      "type": "logs",
      "title": "Recent logs (formatted)",
      "gridPos": { "h": 10, "w": 24, "x": 0, "y": 23 },
      "datasource": { "type": "loki", "uid": "loki" },
      "options": { "showLabels": true, "showTime": true, "wrapLogMessage": true },
      "targets": [
        {
          "refId": "A",
          "expr": "{service_name=~\"$service\"} | json | line_format \"{{ with .timestamp }}{{ . }}{{ else }}{{ index . \\\"ts\\\" }}{{ end }} {{ with .level }}{{ . }}{{ else }}{{ .severity }}{{ end }} [{{ with (index . \\\"service.name\\\") }}{{ . }}{{ else }}{{ .service_name }}{{ end }}] {{ with (index . \\\"http.method\\\") }}{{ . }}{{ else }}-{{ end }} {{ with (index . \\\"http.route\\\") }}{{ . }}{{ else }}-{{ end }} -> {{ with (index . \\\"http.status_code\\\") }}{{ . }}{{ else }}-{{ end }} | req={{ with .RequestId }}{{ . }}{{ else }}{{ with (index . \\\"request_id\\\") }}{{ . }}{{ else }}-{{ end }}{{ end }} | {{ with .message }}{{ . }}{{ else }}{{ with .msg }}{{ . }}{{ else }}{{ with .body }}{{ . }}{{ else }}{{ . }}{{ end }}{{ end }}{{ end }}\""
        }
      ]
    },
    {
      "type": "logs",
      "title": "Recent errors",
      "gridPos": { "h": 8, "w": 24, "x": 0, "y": 33 },
      "datasource": { "type": "loki", "uid": "loki" },
      "options": { "showLabels": true, "showTime": true, "wrapLogMessage": true },
      "targets": [
        {
          "refId": "A",
          "expr": "{service_name=~\"$service\", level=~\"(?i)error|warn\"} | json | line_format \"{{ with .timestamp }}{{ . }}{{ else }}{{ index . \\\"ts\\\" }}{{ end }} {{ with .level }}{{ . }}{{ else }}{{ .severity }}{{ end }} [{{ with (index . \\\"service.name\\\") }}{{ . }}{{ else }}{{ .service_name }}{{ end }}] {{ with (index . \\\"http.method\\\") }}{{ . }}{{ else }}-{{ end }} {{ with (index . \\\"http.route\\\") }}{{ . }}{{ else }}-{{ end }} -> {{ with (index . \\\"http.status_code\\\") }}{{ . }}{{ else }}-{{ end }} | req={{ with .RequestId }}{{ . }}{{ else }}{{ with (index . \\\"request_id\\\") }}{{ . }}{{ else }}-{{ end }}{{ end }} | {{ with .message }}{{ . }}{{ else }}{{ with .msg }}{{ . }}{{ else }}{{ with .body }}{{ . }}{{ else }}{{ . }}{{ end }}{{ end }}{{ end }}\""
        }
      ]
    },
    {
      "type": "table",
      "title": "Recent traces (click Trace ID)",
      "gridPos": { "h": 8, "w": 24, "x": 0, "y": 41 },
      "datasource": { "type": "loki", "uid": "loki" },
      "fieldConfig": {
        "defaults": {},
        "overrides": [
          {
            "matcher": { "id": "byName", "options": "Line" },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "title": "Open in Jaeger",
                    "url": "http://localhost:16686/trace/${__value.raw}",
                    "targetBlank": true
                  }
                ]
              }
            ]
          }
        ]
      },
      "targets": [
        {
          "refId": "A",
          "expr": "{service_name=~\"$service\"} | json | line_format \"{{ .traceid }}\""
        }
      ]
    }
  ],
  "schemaVersion": 39,
  "templating": {
    "list": [
      {
        "name": "service",
        "label": "Service",
        "type": "query",
        "datasource": { "type": "prometheus", "uid": "prom" },
        "query": "label_values(http_server_request_duration_seconds_count, service_name)",
        "refresh": 1,
        "includeAll": true,
        "multi": false,
        "allValue": ".+"
      }
    ]
  },
  "time": { "from": "now-1h", "to": "now" },
  "timezone": "",
  "title": "OTel Observability (Combined)",
  "uid": "otel-observability",
  "version": 1
}

